import random

def find_M(n: int) -> int:
    return (n * (n**2 + 1)) // 2

def M_check(L: list) -> bool:
    n = len(L)
    return sum(L) == (n * (n**2 + 1)) / 2

def diagonal(matrix: list[list], side: bool = False) -> list:
    result = []
    
    N = len(matrix)
    for i in range(N):
        result.append(matrix[i][(N - 1) - i if side else i])
        
    return result

def vertical(matrix: list[list], i: int) -> list:
    result = []
    
    for j in range(len(matrix)):
        result.append(matrix[j][i])
        
    return result

def main():
    N = int(input("Размер квадрата: "))
    M = find_M(N)
    
    b1: bool = N % 2 != 0
    b2: bool = N % 4 == 0
    b3: bool = N % 2 == 0 and N % 4 != 0
    
    if not any((b1, b2, b3)):
        print("Для такого размера невозможно создать магический квадрат")
        return
    
    while True:
        matrix = [[0 for _ in range(N)] for _ in range(N)]
        for i in range(N - 1):
            while True:
                matrix[i] = random.sample(range(1, N**2 + 1), N)
                
                b1: bool = M_check(matrix[i])
                b2: bool = sum(diagonal(matrix)) < M 
                b3: bool = sum(diagonal(matrix, True)) < M
                b4: bool = all(sum(vertical(matrix, j)) < M for j in range(N))
                
                if all((b1, b2, b3, b4)):
                    break

        matrix[N - 1][N - 1] = M - sum(diagonal(matrix))
        matrix[N - 1][0] = M - sum(diagonal(matrix, True))
        
        b1: bool = 1 <= matrix[N - 1][N - 1] <= N**2
        b2: bool = 1 <= matrix[N - 1][0] <= N**2
        b3: bool = (matrix[N - 1][0] + matrix[N - 1][N - 1]) < M - (N - 2)
        b4: bool = 
        
        if :
            break
    
    for i in matrix:
        for j in i:
            print(j, end = " ")
        print()
    
if __name__ == "__main__":
    main()







    # while True:
    #     matrix = [
    #         random.sample(range(1, N**2 + 1), N)
    #         for _ in range(N)
    #     ]
        
    #     if magic_cube_check(matrix):
    #         break